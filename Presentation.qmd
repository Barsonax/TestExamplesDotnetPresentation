---
transition: "slide"
highlightTheme: "vs2015"
slideNumber: true
title: "Rock your tests!"
css : "my-theme.css"
format: revealjs
footer: <https://github.com/Barsonax/TestExamplesDotnetPresentation>
chalkboard: true
navigation-mode: vertical
controls: true
---

## In deze presentatie

- Waarom testen?
- Wat is TestExamplesDotnet
- Hoe werkt TestExamplesDotnet
- Vragen

# Waarom (automatische) testen?

- Snelle feedback
- Bugs voorkomen
- Documentatie
- Test driven design

## Test driven design

Tests kunnen design issues zichtbaar maken.

::: {.fragment}
```{cs}
context.Reservations.Add(new Reservation
{
    UserName = "",
    UserId = TestUser.NormalUser.Id
});
```
:::

<span class="fragment">Veel mocks? </span> <span class="fragment">Verkeerde test scope of..</span> <span class="fragment"> issue met de code? </span>

## Unit vs Integration testen

 <span class="fragment">Verschil is niet zo belangrijk...</span> <span class="fragment"> maar wat wel?</span>

 <span class="fragment">Snelheid</span>

 <span class="fragment">Betrouwbaarheid</span>

 <span class="fragment">Vetrouwen</span>

## Rock your unit

<span class="fragment">Test de publieke interface</span>

<span class="fragment">Focus op functionaliteiten</span>

<span class="fragment">Denk vanuit een gebruiker van je code...</span> <span class="fragment">Dat ook jijzelf zijn!</span>

<span class="fragment">Richtlijnen</span>

# Waarom TestExamplesDotnet?

<span class="fragment">Testsuite met runtimes van > 1 uur</span>

<span class="fragment">Flakyness</span>

<span class="fragment">Welke functie testen we nou?</span>

<span class="fragment">Dit kan beter</span>

## Wat is TestExamplesDotnet?

<https://github.com/Barsonax/TestExamplesDotnet>

Een repository met efficiente test setups voor complexere testen

<span class="fragment">Geen handmatige setup</span>

<span class="fragment">Echte database ipv een mock</span>

<span class="fragment">Core dev feedback loop</span>

## Waarom geen in memory database?

<span class="fragment">Ander gedrag dan een echte database</span>

<span class="fragment">Geen constraints</span>

<span class="fragment">Geen transacties</span>


## En repositories dan?

<span class="fragment">Leaky abstraction</span>

<span class="fragment">Kan niet 100% van functionaliteit testen</span>

<span class="fragment">Entity framework is al een repository</span>

# Ingredienten

## WebApplicationFactory

<https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests>

<span class="fragment">Makkelijk je app draaien vanuit code</span>

<span class="fragment">In memory testserver</span>

<span class="fragment">Limitaties, daarover later meer</span>

## Testcontainers?

<https://dotnet.testcontainers.org/>

<span class="fragment">Library om docker heen</span>

<span class="fragment">Containers starten en beheren vanuit C#</span>

<span class="fragment">Zorgt voor cleanup, ook als je dit zelf vergeet</span>

<span class="fragment">Handig voor dependencies zoals databases</span>

<span class="fragment">

```cs
var container = new MsSqlBuilder().Build();
await container.StartAsync();
```

</span>

## Pooling

<https://www.nuget.org/packages/Microsoft.Extensions.ObjectPool>

<span class="fragment">Migraties zijn duur</span>

<span class="fragment">Test isolatie mag niet gebroken worden</span>

<span class="fragment">Oplossing: </span><span class="fragment">ruim data op en hergebruik de database</span>

## Respawn

<https://github.com/jbogard/Respawn>

<span class="fragment">Sneller dan drop/create of transacties</span>

<span class="fragment">Geen limitaties in tests ten opzichte van transactions</span>

## Lifecycle

<a>
    <img height=600em data-src="media/ApiTestsFlowChart.drawio.svg">
</a>

---

![](media/2000testsin10sec.gif)

# En mijn frontend dan?

- Frontend mag geen blinde vlek zijn.
- Niet ootb mogelijk met WebApplicationFactory

## Playwright

- <https://playwright.dev/dotnet/>

# Vragen

---

<https://github.com/Barsonax/TestExamplesDotnetPresentation>